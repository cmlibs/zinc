# Zinc Library
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

MACRO( SET_PLATFORM_DEFINES )
	# Define platform defines:
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
		SET( GENERIC_PC TRUE )
		SET( CMGUI TRUE )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
		SET( GENERIC_PC TRUE )
		SET( CMGUI TRUE )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		SET( CMGUI TRUE)
		SET( DARWIN TRUE)
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
ENDMACRO( SET_PLATFORM_DEFINES )

MACRO( PRINT_LIST_DUPLICATIONS CHECK_LIST_NAME )
	# If there are any duplications in the given list
	# the duplications will be printed out.
	SET(CHECK_LIST ${${CHECK_LIST_NAME}})
	SET( DUP_FREE_LIST ${CHECK_LIST} )
	LIST( REMOVE_DUPLICATES DUP_FREE_LIST )
	SET( INDEX_LIST )
	FOREACH( LIST_ITEM DUP_FREE_LIST ${CHECK_LIST} )
		LIST( FIND DUP_FREE_LIST ${LIST_ITEM} LIST_ITEM_INDEX )
		LIST( FIND INDEX_LIST ${LIST_ITEM_INDEX} LIST_ITEM_INDEX_INDEX )
		IF( ${LIST_ITEM_INDEX_INDEX} LESS 0 )
			LIST( APPEND INDEX_LIST ${LIST_ITEM_INDEX} )
		ELSE( ${LIST_ITEM_INDEX_INDEX} LESS 0 )
			LIST( APPEND DUPLICATE_LIST ${LIST_ITEM} )
		ENDIF( ${LIST_ITEM_INDEX_INDEX} LESS 0 )
	ENDFOREACH( LIST_ITEM DUP_FREE_LIST ${CHECK_LIST} )
	LIST( LENGTH DUPLICATE_LIST DUP_LIST_LENGTH )
	IF( ${DUP_LIST_LENGTH} GREATER 0 )
		MESSAGE( STATUS "Duplicates found: ${CHECK_LIST_NAME}" )
		FOREACH( LIST_ITEM ${DUPLICATE_LIST} )
			MESSAGE( STATUS "Duplicate: ${LIST_ITEM}" )
		ENDFOREACH( LIST_ITEM ${DUPLICATE_LIST} )
	ENDIF( ${DUP_LIST_LENGTH} GREATER 0 )
ENDMACRO( PRINT_LIST_DUPLICATIONS CHECK_LIST )

MACRO( SET_OPERATING_SYSTEM_DEFINES )
	# Define operating system defines:
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
		SET( WIN32_SYSTEM TRUE )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		#SET( CMAKE_OSX_ARCHITECTURES i386;x86_64)
    #SET( CMAKE_OSX_ARCHITECTURES x86_64)
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
ENDMACRO( SET_OPERATING_SYSTEM_DEFINES )

MACRO( SET_USER_INTERFACE_DEFINES )
	# Define user interface defines
	IF( ${ZINC_USER_INTERFACE} MATCHES "win32" )
		SET( WIN32_USER_INTERFACE TRUE )
	ENDIF( ${ZINC_USER_INTERFACE} MATCHES "win32" )
	IF( ${ZINC_USER_INTERFACE} MATCHES "gtk" )
		SET( GTK_USER_INTERFACE TRUE )
		IF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" OR USE_GTKMAIN )
			SET( USE_GTK_MAIN_STEP )
		ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" OR USE_GTKMAIN )
	ENDIF( ${ZINC_USER_INTERFACE} MATCHES "gtk" )
	IF( ${ZINC_USER_INTERFACE} MATCHES "wx" )
		SET( WX_USER_INTERFACE TRUE )
	ENDIF( ${ZINC_USER_INTERFACE} MATCHES "wx" )
	IF( ${ZINC_USER_INTERFACE} MATCHES "console" )
		SET( CONSOLE_USER_INTERFACE TRUE )
	ENDIF( ${ZINC_USER_INTERFACE} MATCHES "console" )
	IF( ${ZINC_USER_INTERFACE} MATCHES "carbon" )
		SET( CARBON_USER_INTERFACE TRUE )
		SET( TARGET_API_MAC_CARBON TRUE )
	ENDIF( ${ZINC_USER_INTERFACE} MATCHES "carbon" )
ENDMACRO( )

MACRO( SET_GRAPHICS_DEFINES )
	# Define graphics defines
	IF( ${GRAPHICS_API} MATCHES "OPENGL_GRAPHICS" )
		SET( OPENGL_API TRUE )
		IF( NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
			#//-- SET( SELECT_DESCRIPTORS TRUE )
		ENDIF( NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
	ENDIF( ${GRAPHICS_API} MATCHES "OPENGL_GRAPHICS" )
ENDMACRO( )

MACRO(Subversion_GET_REVISION DIR VARIABLE)
	# Determine the svn revision of the source in the given directory.
	FIND_PROGRAM(SVN_EXECUTABLE svn
		DOC "subversion command line client")
	IF( NOT SVN_EXECUTABLE )
		FIND_PROGRAM( TORTOISESVN_EXECUTABLE SubWCRev
			DOC "Tortiose SVN Working Copy client" )
	ENDIF( NOT SVN_EXECUTABLE )
	IF( SVN_EXECUTABLE )
		GET_FILENAME_COMPONENT(SVN_WE ${SVN_EXECUTABLE} NAME_WE)
		EXECUTE_PROCESS(COMMAND ${SVN_WE}version ${DIR}
			OUTPUT_VARIABLE ${VARIABLE}
			OUTPUT_STRIP_TRAILING_WHITESPACE)
		STRING( REGEX MATCH "^([0-9]+[M]?)$" HAVE_REVISION_NUMBER ${${VARIABLE}} )
		SET( REVISION_NUMBER_MATCH ${CMAKE_MATCH_1} )
		STRING( REGEX MATCH "^[0-9]+:([0-9]+[M]?)$" HAVE_REVISION_NUMBER_RANGE ${${VARIABLE}} )
		SET( REVISION_NUMBER_RANGE_MATCH ${CMAKE_MATCH_1} )
		IF( HAVE_REVISION_NUMBER_RANGE )
			#MESSAGE( STATUS "Matched revision range: ${REVISION_NUMBER_RANGE_MATCH} from: ${${VARIABLE}}" )
			SET( ${VARIABLE} ${REVISION_NUMBER_RANGE_MATCH} )
		ELSEIF( HAVE_REVISION_NUMBER )
			#MESSAGE( STATUS "Matched revision number: ${REVISION_NUMBER_MATCH} from: ${${VARIABLE}}" )
			SET( ${VARIABLE} ${REVISION_NUMBER_MATCH} )
		ENDIF( HAVE_REVISION_NUMBER_RANGE )

	ELSEIF( TORTOISESVN_EXECUTABLE )
		EXECUTE_PROCESS(COMMAND ${TORTOISESVN_EXECUTABLE} ${DIR}
			OUTPUT_VARIABLE ${VARIABLE}
			OUTPUT_STRIP_TRAILING_WHITESPACE)
		SET( MAX_NUMBER 0 )
		SEPARATE_ARGUMENTS(RESPONSE_LIST WINDOWS_COMMAND "${${VARIABLE}}")
		#MESSAGE( STATUS "TORTOISE SVN RESPONSE: ${RESPONSE_LIST}" )
		FOREACH( RESPONSE_ITEM ${RESPONSE_LIST} )
			STRING( REGEX MATCH "^[0-9]+$" HAVE_NUMBER ${RESPONSE_ITEM} )
			STRING( REGEX MATCH "^[0-9]+:([0-9]+)$" HAVE_NUMBER_RANGE ${RESPONSE_ITEM} )
			IF( HAVE_NUMBER_RANGE )
				SET( HAVE_NUMBER ${CMAKE_MATCH_1} )
			ENDIF( HAVE_NUMBER_RANGE )
			IF( HAVE_NUMBER )
				IF( ${MAX_NUMBER} LESS ${HAVE_NUMBER} )
					SET( MAX_NUMBER ${HAVE_NUMBER} )
				ENDIF( ${MAX_NUMBER} LESS ${HAVE_NUMBER} )
			ENDIF( HAVE_NUMBER )
		ENDFOREACH( RESPONSE_ITEM ${RESPONSE_LIST} )
		SET( ${VARIABLE} ${MAX_NUMBER} )
	ENDIF( SVN_EXECUTABLE )
ENDMACRO()

MACRO( SET_TRUE_IF_NOT_DEFINED VARIABLE )
	IF( NOT DEFINED ${VARIABLE} )
		SET( ${VARIABLE} TRUE )
	ENDIF( NOT DEFINED ${VARIABLE} )
ENDMACRO( SET_TRUE_IF_NOT_DEFINED VARIABLE )

MACRO( SET_FALSE_IF_NOT_DEFINED VARIABLE )
	IF( NOT DEFINED ${VARIABLE} )
		SET( ${VARIABLE} FALSE )
	ENDIF( NOT DEFINED ${VARIABLE} )
ENDMACRO( SET_FALSE_IF_NOT_DEFINED VARIABLE )

